{"version":3,"sources":["logo.svg","components/Fullpage.js","components/DownIcon.js","sections/Header.js","sections/AboutSections.js","components/SkillCard.js","sections/SkillsSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Fullpage","children","this","props","react_default","a","createElement","className","concat","Component","DownIcon","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","icon","onClick","src","style","Transform","maxWidth","eader","_this","state","color","changeColor","bind","assertThisInitialized","setState","Fullpage_Fullpage","onMouseOver","onMouseLeave","data","title","subtitle","keys","links","map","key","react_social_icons","url","modules","activeClass","to","DownIcon_DownIcon","icons","down","console","log","name","AboutSection","section","SkillCard","skill","content","SkillsSection","items","SkillCard_SkillCard","App","Header_eader","AboutSections_AboutSection","SkillsSection_SkillsSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3729659.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from \"react\";\nimport './Fullpage.css';\n\nexport default class Fullpage extends Component{\n    render(){\n        const {children} = this.props;\n        return(\n            <div className={`fullpage ${this.props.className || '' }`}>\n                {children}\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\n\n export default class DownIcon extends Component{\n     constructor(){\n         super()\n     }\n     render(){\n        const {icon} = this.props;\n        const {onClick} = this.props;\n        return(\n        <div>\n            <img src={icon} \n                style={{\n                Transform:'translateY(-300px)',\n                maxWidth:'30px'\n                }}\n                onClick={onClick}/>\n        </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport Fullpage from \"../components/Fullpage\";\nimport DownIcon from \"../components/DownIcon\";\nimport data from \"../data\";\nimport { SocialIcon } from \"react-social-icons\";\nimport { Link, Element} from 'react-scroll'\n\nexport default class eader extends Component {\n  constructor(){\n    super();\n    this.state = {\n      color:'white'\n    }\n    this.changeColor=this.changeColor.bind(this);\n  }\n  changeColor(){\n    this.setState({\n      color:this.state.color === 'white' ? 'yellow' : 'white'\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Fullpage className=\"first\">\n          <div>\n            <h1 className=\"title\"\n              style={{\n                color:this.state.color\n              }}\n              onMouseOver={this.changeColor}\n               onMouseLeave={this.changeColor}>{data.title}</h1>\n          </div>\n          <div>\n            <h2>{data.subtitle}</h2>\n          </div>\n          {Object.keys(data.links).map(key => {\n            return <SocialIcon url={data.links[key]} />;\n          })}\n        </Fullpage>\n        <Link activeClass=\"active\" \n          to=\"about\">\n          <DownIcon icon={data.icons.down}\n            onClick={() => console.log(\"I'm working\")} />\n        </Link>\n        <Element name=\"about\" className=\"element\">\n        </Element>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Fullpage from \"../components/Fullpage\";\nimport data from \"../data\";\nimport { SocialIcon } from \"react-social-icons\";\nimport \"./AboutSection.css\";\nexport default class AboutSection extends Component {\n  render() {\n    return (\n      <Fullpage className=\"second\">\n        <h3>{data.section[0].title}</h3>\n      </Fullpage>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./SkillCard.css\";\n\nexport default class SkillCard extends Component {\n  render() {\n    const { skill } = this.props;\n    return (\n        <div>\n          <img src=\"{skill.content.image}\" />\n          <p>{skill.content.title}</p>\n        </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Fullpage from \"../components/Fullpage\";\nimport SkillCard from \"../components/SkillCard\";\nimport data from \"../data\";\nimport \"./SkillsSection.css\";\n\nexport default class SkillsSection extends Component {\n  render() {\n    return (\n      <Fullpage className=\"third\">\n        <h3>{data.section[1].title}</h3>\n        <div>\n          {data.section[1].items.map(skill => {\n            return (\n                <SkillCard skill={skill} />\n            );\n          })}\n        </div>\n      </Fullpage>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport data from \"./data\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from './sections/Header';\nimport AboutSection from './sections/AboutSections';\nimport SkillsSection from './sections/SkillsSection';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navigation\" />\n        <Header />\n        <AboutSection />\n        <SkillsSection />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}